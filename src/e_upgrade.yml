openapi: 3.0.2

info:
  title: e_upgrade API Documentation
  description: API documentation BY Tendry_rkotoa
  version: '1.0'

servers:
  - url: http://localhost:8080
    description: Local development server

paths:
  /categories:
    get:
      tags:
        - Categories
      summary: Get all categories
      operationId: getAllCategories
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Categories'

    post:
      tags:
        - Categories
      summary: Add a new category
      operationId: addCategory
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Categories'
      responses:
        '200':
          description: Category added successfully

  /categories/{id}:
    get:
      tags:
        - Categories
      summary: Get category by ID
      operationId: getCategoryById
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the category
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Categories'
        '404':
          description: Category not found

    put:
      tags:
        - Categories
      summary: Update a category
      operationId: updateCategory
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the category to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Categories'
      responses:
        '200':
          description: Category updated successfully
        '404':
          description: Category not found

    delete:
      tags:
        - Categories
      summary: Delete a category
      operationId: deleteCategoryById
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the category to delete
      responses:
        '200':
          description: Category deleted successfully
        '404':
          description: Category not found

  /order_details:
    get:
      tags:
        - Order_details
      summary: Get all order details
      operationId: getAllOrder_details
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order_details'

    post:
      tags:
        - Order_details
      summary: Add a new order detail
      operationId: addOrder_details
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order_details'
      responses:
        '200':
          description: Order detail added successfully

  /order_details/{id}:
    get:
      tags:
        - Order_details
      summary: Get order detail by ID
      operationId: getOrder_detailsById
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the order detail
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order_details'
        '404':
          description: Order detail not found

    delete:
      tags:
        - Order_details
      summary: Delete an order detail
      operationId: deleteOrder_detailsById
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the order detail to delete
      responses:
        '200':
          description: Order detail deleted successfully
        '404':
          description: Order detail not found

    put:
      tags:
        - Order_details
      summary: Update an order detail
      operationId: updateOrder_details
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the order detail to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order_details'
      responses:
        '200':
          description: Order detail updated successfully
        '404':
          description: Order detail not found

  /order:
    get:
      tags:
        - Order
      summary: Get all orders
      operationId: getAllOrders
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'

    post:
      tags:
        - Order
      summary: Add a new order
      operationId: addOrder
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '200':
          description: Order added successfully

  /order/{id}:
    get:
      tags:
        - Order
      summary: Get order by ID
      operationId: findOrdersById
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the order
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Order not found

    delete:
      tags:
        - Order
      summary: Delete an order
      operationId: deleteOrderById
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the order to delete
      responses:
        '200':
          description: Order deleted successfully
        '404':
          description: Order not found

    put:
      tags:
        - Order
      summary: Update an order
      operationId: updateOrder
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the order to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '200':
          description: Order updated successfully
        '404':
          description: Order not found

  /products:
    get:
      tags:
        - Products
      summary: Get all products
      operationId: getAllProducts
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'

  /products/{id}:
    get:
      tags:
        - Products
      summary: Get product by ID
      operationId: getProductById
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the product
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'

  /products/name/{name}:
    get:
      tags:
        - Products
      summary: Get products by name
      operationId: getProductsByName
      parameters:
        - in: path
          name: name
          required: true
          schema:
            type: string
          description: Name of the product to search for
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'

  /products/add:
    post:
      tags:
        - Products
      summary: Add a new product
      operationId: addProduct
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '200':
          description: Product added successfully

  /products/delete/{id}:
    delete:
      tags:
        - Products
      summary: Delete a product
      operationId: deleteProductById
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the product to delete
      responses:
        '200':
          description: Product deleted successfully
        '404':
          description: Product not found

  /products/update/{id}:
    put:
      tags:
        - Products
      summary: Update a product
      operationId: updateProduct
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the product to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '200':
          description: Product updated successfully
        '404':
          description: Product not found

  /user:
    get:
      tags:
        - Users
      summary: Get all users
      operationId: getAllUsers
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'

  /user/{id}:
    get:
      tags:
        - Users
      summary: Get user by ID
      operationId: getUserById
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the user
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /user/name/{name}:
    get:
      tags:
        - Users
      summary: Get users by name
      operationId: getUsersByName
      parameters:
        - in: path
          name: name
          required: true
          schema:
            type: string
          description: Name of the user to search for
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'

  /user/add:
    post:
      tags:
        - Users
      summary: Add a new user
      operationId: addUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User added successfully

  /user/delete/{id}:
    delete:
      tags:
        - Users
      summary: Delete a user
      operationId: deleteUserById
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the user to delete
      responses:
        '200':
          description: User deleted successfully
        '404':
          description: User not found

  /user/update/{id}:
    put:
      tags:
        - Users
      summary: Update a user
      operationId: updateUser
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the user to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User updated successfully
        '404':
          description: User not found

components:
  schemas:
    Categories:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
      example:
        id: 1
        name: Electronics

    Order_details:
      type: object
      properties:
        id:
          type: integer
        order_id:
          type: integer
        product_id:
          type: integer
        quantity:
          type: integer
        unit_price:
          type: number
      example:
        id: 1
        order_id: 123
        product_id: 456
        quantity: 3
        unit_price: 29.99

    Order:
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: integer
        order_date:
          type: string
          format: date-time
        total_bills:
          type: number
      example:
        id: 1
        user_id: 101
        order_date: '2023-08-30'
        total_bills: 150.0

    Product:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        categories_id:
          type: integer
        price:
          type: number
        stock_quantity:
          type: integer
      example:
        id: 1
        name: ASUS TUF GAMING
        description: A high-end lAPTOP
        categories_id: 3
        price: 799.99
        stock_quantity: 100

    User:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
        password:
          type: string
        adress:
          type: string
      example:
        id: 1
        name: Tendry Ny Avo
        email: hei.tendry.2@gmail.com
        password: mysecretpassword
        adress: Antsahabe
